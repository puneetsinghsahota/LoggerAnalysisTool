using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace LoggerAnalysisTool
{
    public partial class AdvancedOperationsForm : Form
    {
        private string _workOrder; //Stores the current Work Order being processed
        private bool _isFrontEnd; // Is true if the System is Front End
        private bool _isTransition; //Is true if the system is a Transition (Logs include logs for previous and next work order)
        private bool _isCrashWorkOrder; // Is true if the user is trying to detect whether a User is seeing the latest logs generated by the system
        private bool _isLoomSystem; // Is true if the System is A Loom System
        private DateTime _START = new DateTime(); //Start time of the logs
        private DateTime _END = new DateTime(); //End time of the logs

        //Constructor which initializes the required variables
        public AdvancedOperationsForm(string workOrder, bool isFrontEnd, bool isTransition, bool isLoomSystem,bool isCrashWorkOrder,DateTime START,DateTime END)
        {
            InitializeComponent();
            this.Icon = Icon = Icon.ExtractAssociatedIcon(System.Reflection.Assembly.GetExecutingAssembly().Location);
            selectAllButton.Text = ConfigurationManager.AppSettings["SelectAllText"].ToString();
            _START = START;
            _END = END;
            _workOrder = workOrder;
            _isFrontEnd = isFrontEnd;
            _isTransition = isTransition;
            _isLoomSystem = isLoomSystem;
            _isCrashWorkOrder = isCrashWorkOrder;
            SetControlsProperties();
        }

        //Sets the UI according to number of systems
        private void SetControlsProperties()
        {
            DataGridViewCheckBoxColumn checkColumn = new DataGridViewCheckBoxColumn();
            checkColumn.Name = "checkColumn";
            checkColumn.HeaderText = "Select";
            
            checkColumn.ReadOnly = false;
            SystemsViewerDataGrid.Columns.Add(checkColumn);
            SystemsViewerDataGrid.RowHeadersVisible = false;
            SystemsViewerDataGrid.DataSource = GetSystemNames();
            LogTypeComboBox.Items.AddRange(GetLogTypes().ToArray<string>());
            LogTypeComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
            LogTypeComboBox.SelectedIndex = 0;
        }


        private DataTable GetSystemNames()
        {
            DataTable systemNames = new DataTable();
            systemNames.Columns.Add("SystemName");
            systemNames.Columns.Add("CameraSet");
            systemNames.Columns.Add("Master");
            DBMaster obj= new DBMaster();
            DataTable cameraSetDt = obj.queryDB(ConfigurationManager.AppSettings["webSpectorDBName"].ToString(), "CameraSets", "CSID,CSNumPCs",ConfigurationManager.AppSettings["noConditions"].ToString());
            if (cameraSetDt.Rows.Count > 0)
            {
                string frontEndName = "FrontEnd";
                int cs = 0;
                int m = 0;

                DataRow frontEndRow = systemNames.NewRow();
          
                frontEndRow["SystemName"] = frontEndName;
                frontEndRow["CameraSet"] = cs;
                frontEndRow["Master"] =m;

                systemNames.Rows.Add(frontEndRow);

                foreach (DataRow dr in cameraSetDt.Rows)
                {
                    int cameraSetID = 0;
                    Int32.TryParse(dr["CSID"].ToString(), out cameraSetID);
                    int numPCs = 0;
                    Int32.TryParse(dr["CSNumPCs"].ToString(), out numPCs);
                    for (int i = 1; i <= numPCs; i++)
                    {
                        DataRow row = systemNames.NewRow();
                        string name = "CS" + cameraSetID + "M" + i;
                        row["SystemName"] = name;
                        row["CameraSet"] = cameraSetID;
                        row["Master"] = i - 1;
                        systemNames.Rows.Add(row);
                    }
                }
            }
            return systemNames;
        }
        
        //Gets the type of logs inside the System specific Logs Screen through the Tag Map which is passed to this Form
        private List<string> GetLogTypes()
        {
            List<string> logTags = ConfigurationManager.AppSettings.AllKeys.Where(key => key.Contains("LogKey")).Select(key => ConfigurationManager.AppSettings[key]).ToList<string>();
            return logTags;
        }

        //Gets triggered when the user clicks on close button
        private void closeButton_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        //Gets triggered when the user Clicks Next to see the logs
        private void nextButton_Click(object sender, EventArgs e)
        {

            DataTable dt = GetSelectedRows();
            string selectedLogType = LogTypeComboBox.SelectedItem.ToString();
            LogKeySpecificLogForm obj = new LogKeySpecificLogForm(_workOrder,dt,selectedLogType, _isFrontEnd, _isTransition, _isCrashWorkOrder, _isLoomSystem );
            obj.ShowDialog();
        }

        //Gets the number of rows selected inside the form
        private DataTable GetSelectedRows()
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("cs");
            dt.Columns.Add("m");
            string selectedLogtype = LogTypeComboBox.SelectedItem.ToString() + "Key";
            foreach (DataGridViewRow dr in SystemsViewerDataGrid.Rows)
            {
                if (Convert.ToBoolean(dr.Cells["checkColumn"].Value) == true)
                {
                    int cs = 0;
                    int m = 0;
                    Int32.TryParse(dr.Cells["CameraSet"].Value.ToString(), out cs);
                    Int32.TryParse(dr.Cells["Master"].Value.ToString(), out m);
                    DataRow row = dt.NewRow();
                    row["cs"] = cs;
                    row["m"] = m;
                    dt.Rows.Add(row);
                }
            }
            return dt;
        }

        //Gets triggered when the user clicks on select all
        private void selectAllButton_Click(object sender, EventArgs e)
        {
            if (selectAllButton.Text.Equals(ConfigurationManager.AppSettings["SelectAllText"].ToString()))
            {
                foreach (DataGridViewRow row in SystemsViewerDataGrid.Rows)
                {
                    row.Cells["checkColumn"].Value = true;
                }
                selectAllButton.Text = ConfigurationManager.AppSettings["DeselectAllText"].ToString();
            }
            else
            {
                foreach (DataGridViewRow row in SystemsViewerDataGrid.Rows)
                {
                    row.Cells["checkColumn"].Value = false;
                }
                selectAllButton.Text = ConfigurationManager.AppSettings["SelectAllText"].ToString();
            }
        }
    }
}
